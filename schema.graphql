### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Course {
  createdAt: DateTime
  id: Int!
  name: String!
  student(after: StudentWhereUniqueInput, before: StudentWhereUniqueInput, first: Int, last: Int): [Student!]!
  updatedAt: DateTime
}

input CourseOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  student: StudentListRelationFilter
  updatedAt: DateTimeNullableFilter
}

input CourseWhereUniqueInput {
  id: Int
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumGraduateNullableFilter {
  equals: Graduate
  in: [Graduate!]
  not: NestedEnumGraduateNullableFilter
  notIn: [Graduate!]
}

input EnumSexNullableFilter {
  equals: Sex
  in: [Sex!]
  not: NestedEnumSexNullableFilter
  notIn: [Sex!]
}

enum Graduate {
  Graduate
  Undergraduate
}

scalar Gradute

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumGraduateNullableFilter {
  equals: Graduate
  in: [Graduate!]
  not: NestedEnumGraduateNullableFilter
  notIn: [Graduate!]
}

input NestedEnumSexNullableFilter {
  equals: Sex
  in: [Sex!]
  not: NestedEnumSexNullableFilter
  notIn: [Sex!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Professor {
  createdAt: DateTime
  email: String
  id: Int!
  name: String!
  student(after: StudentWhereUniqueInput, before: StudentWhereUniqueInput, first: Int, last: Int): [Student!]!
  updatedAt: DateTime
}

input ProfessorOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ProfessorWhereInput {
  AND: [ProfessorWhereInput!]
  NOT: [ProfessorWhereInput!]
  OR: [ProfessorWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  id: IntFilter
  name: StringFilter
  student: StudentListRelationFilter
  updatedAt: DateTimeNullableFilter
}

input ProfessorWhereUniqueInput {
  id: Int
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int, orderBy: [CourseOrderByInput!], where: CourseWhereInput): [Course!]!
  professor(where: ProfessorWhereUniqueInput!): Professor
  professors(after: ProfessorWhereUniqueInput, before: ProfessorWhereUniqueInput, first: Int, last: Int, orderBy: [ProfessorOrderByInput!], where: ProfessorWhereInput): [Professor!]!
  student(where: StudentWhereUniqueInput!): Student
  students(after: StudentWhereUniqueInput, before: StudentWhereUniqueInput, first: Int, last: Int, orderBy: [StudentOrderByInput!], where: StudentWhereInput): [Student!]!
}

scalar Sex

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Student {
  courseId: Int
  courses: Course
  createdAt: DateTime
  email: String
  firstName: String!
  gradute: Graduate
  id: Int!
  lastName: String!
  professor: Professor
  professorId: Int
  sex: Sex
  updatedAt: DateTime
}

input StudentListRelationFilter {
  every: StudentWhereInput
  none: StudentWhereInput
  some: StudentWhereInput
}

input StudentOrderByInput {
  courseId: SortOrder
  courses: CourseOrderByInput
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gradute: SortOrder
  id: SortOrder
  lastName: SortOrder
  professor: ProfessorOrderByInput
  professorId: SortOrder
  sex: SortOrder
  updatedAt: SortOrder
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  courseId: IntNullableFilter
  courses: CourseWhereInput
  createdAt: DateTimeFilter
  email: StringNullableFilter
  firstName: StringFilter
  gradute: EnumGraduateNullableFilter
  id: IntFilter
  lastName: StringFilter
  professor: ProfessorWhereInput
  professorId: IntNullableFilter
  sex: EnumSexNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StudentWhereUniqueInput {
  id: Int
}
