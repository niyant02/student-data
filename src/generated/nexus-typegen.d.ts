/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from "./../../node_modules/.prisma/client/index"
import type { QueryComplexity } from "nexus/dist/plugins/queryComplexityPlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    sex<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Sex";
    gradute<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Gradute";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    sex<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Sex";
    gradute<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Gradute";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CourseListRelationFilter: { // input type
    every?: NexusGenInputs['CourseWhereInput'] | null; // CourseWhereInput
    none?: NexusGenInputs['CourseWhereInput'] | null; // CourseWhereInput
    some?: NexusGenInputs['CourseWhereInput'] | null; // CourseWhereInput
  }
  CourseOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    id?: NexusGenEnums['SortOrder'] | null; // SortOrder
    name?: NexusGenEnums['SortOrder'] | null; // SortOrder
    student?: NexusGenInputs['StudentOrderByInput'] | null; // StudentOrderByInput
    studentId?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  CourseWhereInput: { // input type
    AND?: NexusGenInputs['CourseWhereInput'][] | null; // [CourseWhereInput!]
    NOT?: NexusGenInputs['CourseWhereInput'][] | null; // [CourseWhereInput!]
    OR?: NexusGenInputs['CourseWhereInput'][] | null; // [CourseWhereInput!]
    createdAt?: NexusGenInputs['DateTimeFilter'] | null; // DateTimeFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    student?: NexusGenInputs['StudentWhereInput'] | null; // StudentWhereInput
    studentId?: NexusGenInputs['IntNullableFilter'] | null; // IntNullableFilter
    updatedAt?: NexusGenInputs['DateTimeNullableFilter'] | null; // DateTimeNullableFilter
  }
  CourseWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  DateTimeFilter: { // input type
    equals?: NexusGenScalars['DateTime'] | null; // DateTime
    gt?: NexusGenScalars['DateTime'] | null; // DateTime
    gte?: NexusGenScalars['DateTime'] | null; // DateTime
    in?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
    lt?: NexusGenScalars['DateTime'] | null; // DateTime
    lte?: NexusGenScalars['DateTime'] | null; // DateTime
    not?: NexusGenInputs['NestedDateTimeFilter'] | null; // NestedDateTimeFilter
    notIn?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
  }
  DateTimeNullableFilter: { // input type
    equals?: NexusGenScalars['DateTime'] | null; // DateTime
    gt?: NexusGenScalars['DateTime'] | null; // DateTime
    gte?: NexusGenScalars['DateTime'] | null; // DateTime
    in?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
    lt?: NexusGenScalars['DateTime'] | null; // DateTime
    lte?: NexusGenScalars['DateTime'] | null; // DateTime
    not?: NexusGenInputs['NestedDateTimeNullableFilter'] | null; // NestedDateTimeNullableFilter
    notIn?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
  }
  EnumGraduateNullableFilter: { // input type
    equals?: NexusGenEnums['Graduate'] | null; // Graduate
    in?: NexusGenEnums['Graduate'][] | null; // [Graduate!]
    not?: NexusGenInputs['NestedEnumGraduateNullableFilter'] | null; // NestedEnumGraduateNullableFilter
    notIn?: NexusGenEnums['Graduate'][] | null; // [Graduate!]
  }
  EnumSexNullableFilter: { // input type
    equals?: NexusGenScalars['Sex'] | null; // Sex
    in?: NexusGenScalars['Sex'][] | null; // [Sex!]
    not?: NexusGenInputs['NestedEnumSexNullableFilter'] | null; // NestedEnumSexNullableFilter
    notIn?: NexusGenScalars['Sex'][] | null; // [Sex!]
  }
  IntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntFilter'] | null; // NestedIntFilter
    notIn?: number[] | null; // [Int!]
  }
  IntNullableFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntNullableFilter'] | null; // NestedIntNullableFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedDateTimeFilter: { // input type
    equals?: NexusGenScalars['DateTime'] | null; // DateTime
    gt?: NexusGenScalars['DateTime'] | null; // DateTime
    gte?: NexusGenScalars['DateTime'] | null; // DateTime
    in?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
    lt?: NexusGenScalars['DateTime'] | null; // DateTime
    lte?: NexusGenScalars['DateTime'] | null; // DateTime
    not?: NexusGenInputs['NestedDateTimeFilter'] | null; // NestedDateTimeFilter
    notIn?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
  }
  NestedDateTimeNullableFilter: { // input type
    equals?: NexusGenScalars['DateTime'] | null; // DateTime
    gt?: NexusGenScalars['DateTime'] | null; // DateTime
    gte?: NexusGenScalars['DateTime'] | null; // DateTime
    in?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
    lt?: NexusGenScalars['DateTime'] | null; // DateTime
    lte?: NexusGenScalars['DateTime'] | null; // DateTime
    not?: NexusGenInputs['NestedDateTimeNullableFilter'] | null; // NestedDateTimeNullableFilter
    notIn?: NexusGenScalars['DateTime'][] | null; // [DateTime!]
  }
  NestedEnumGraduateNullableFilter: { // input type
    equals?: NexusGenEnums['Graduate'] | null; // Graduate
    in?: NexusGenEnums['Graduate'][] | null; // [Graduate!]
    not?: NexusGenInputs['NestedEnumGraduateNullableFilter'] | null; // NestedEnumGraduateNullableFilter
    notIn?: NexusGenEnums['Graduate'][] | null; // [Graduate!]
  }
  NestedEnumSexNullableFilter: { // input type
    equals?: NexusGenScalars['Sex'] | null; // Sex
    in?: NexusGenScalars['Sex'][] | null; // [Sex!]
    not?: NexusGenInputs['NestedEnumSexNullableFilter'] | null; // NestedEnumSexNullableFilter
    notIn?: NexusGenScalars['Sex'][] | null; // [Sex!]
  }
  NestedIntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntFilter'] | null; // NestedIntFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedIntNullableFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: NexusGenInputs['NestedIntNullableFilter'] | null; // NestedIntNullableFilter
    notIn?: number[] | null; // [Int!]
  }
  NestedStringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  NestedStringNullableFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringNullableFilter'] | null; // NestedStringNullableFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  ProfessorListRelationFilter: { // input type
    every?: NexusGenInputs['ProfessorWhereInput'] | null; // ProfessorWhereInput
    none?: NexusGenInputs['ProfessorWhereInput'] | null; // ProfessorWhereInput
    some?: NexusGenInputs['ProfessorWhereInput'] | null; // ProfessorWhereInput
  }
  ProfessorOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    email?: NexusGenEnums['SortOrder'] | null; // SortOrder
    id?: NexusGenEnums['SortOrder'] | null; // SortOrder
    name?: NexusGenEnums['SortOrder'] | null; // SortOrder
    student?: NexusGenInputs['StudentOrderByInput'] | null; // StudentOrderByInput
    studentId?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  ProfessorWhereInput: { // input type
    AND?: NexusGenInputs['ProfessorWhereInput'][] | null; // [ProfessorWhereInput!]
    NOT?: NexusGenInputs['ProfessorWhereInput'][] | null; // [ProfessorWhereInput!]
    OR?: NexusGenInputs['ProfessorWhereInput'][] | null; // [ProfessorWhereInput!]
    createdAt?: NexusGenInputs['DateTimeFilter'] | null; // DateTimeFilter
    email?: NexusGenInputs['StringNullableFilter'] | null; // StringNullableFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    student?: NexusGenInputs['StudentWhereInput'] | null; // StudentWhereInput
    studentId?: NexusGenInputs['IntNullableFilter'] | null; // IntNullableFilter
    updatedAt?: NexusGenInputs['DateTimeNullableFilter'] | null; // DateTimeNullableFilter
  }
  ProfessorWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringFilter'] | null; // NestedStringFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  StringNullableFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: NexusGenInputs['NestedStringNullableFilter'] | null; // NestedStringNullableFilter
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  StudentOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    email?: NexusGenEnums['SortOrder'] | null; // SortOrder
    gradute?: NexusGenEnums['SortOrder'] | null; // SortOrder
    id?: NexusGenEnums['SortOrder'] | null; // SortOrder
    name?: NexusGenEnums['SortOrder'] | null; // SortOrder
    sex?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  StudentWhereInput: { // input type
    AND?: NexusGenInputs['StudentWhereInput'][] | null; // [StudentWhereInput!]
    NOT?: NexusGenInputs['StudentWhereInput'][] | null; // [StudentWhereInput!]
    OR?: NexusGenInputs['StudentWhereInput'][] | null; // [StudentWhereInput!]
    courses?: NexusGenInputs['CourseListRelationFilter'] | null; // CourseListRelationFilter
    createdAt?: NexusGenInputs['DateTimeFilter'] | null; // DateTimeFilter
    email?: NexusGenInputs['StringNullableFilter'] | null; // StringNullableFilter
    gradute?: NexusGenInputs['EnumGraduateNullableFilter'] | null; // EnumGraduateNullableFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    professor?: NexusGenInputs['ProfessorListRelationFilter'] | null; // ProfessorListRelationFilter
    sex?: NexusGenInputs['EnumSexNullableFilter'] | null; // EnumSexNullableFilter
    updatedAt?: NexusGenInputs['DateTimeNullableFilter'] | null; // DateTimeNullableFilter
  }
  StudentWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
  Graduate: prisma.Graduate
  SortOrder: prisma.SortOrder
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
  DateTime: Date
  Gradute: any
  JSONObject: any
  Sex: prisma.Sex
}

export interface NexusGenObjects {
  Course: prisma.Course;
  Professor: prisma.Professor;
  Query: {};
  Student: prisma.Student;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Course: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    name: string; // String!
    student: NexusGenRootTypes['Student'] | null; // Student
    studentId: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Professor: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    id: number; // Int!
    name: string; // String!
    student: NexusGenRootTypes['Student'] | null; // Student
    studentId: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: { // field return type
    course: NexusGenRootTypes['Course'] | null; // Course
    courses: NexusGenRootTypes['Course'][]; // [Course!]!
    professor: NexusGenRootTypes['Professor'] | null; // Professor
    professors: NexusGenRootTypes['Professor'][]; // [Professor!]!
    student: NexusGenRootTypes['Student'] | null; // Student
    students: NexusGenRootTypes['Student'][]; // [Student!]!
  }
  Student: { // field return type
    courses: NexusGenRootTypes['Course'][]; // [Course!]!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    gradute: NexusGenEnums['Graduate'] | null; // Graduate
    id: number; // Int!
    name: string; // String!
    professor: NexusGenRootTypes['Professor'][]; // [Professor!]!
    sex: NexusGenScalars['Sex'] | null; // Sex
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Course: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    name: 'String'
    student: 'Student'
    studentId: 'Int'
    updatedAt: 'DateTime'
  }
  Professor: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'Int'
    name: 'String'
    student: 'Student'
    studentId: 'Int'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    course: 'Course'
    courses: 'Course'
    professor: 'Professor'
    professors: 'Professor'
    student: 'Student'
    students: 'Student'
  }
  Student: { // field return type name
    courses: 'Course'
    createdAt: 'DateTime'
    email: 'String'
    gradute: 'Graduate'
    id: 'Int'
    name: 'String'
    professor: 'Professor'
    sex: 'Sex'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Query: {
    course: { // args
      where: NexusGenInputs['CourseWhereUniqueInput']; // CourseWhereUniqueInput!
    }
    courses: { // args
      after?: NexusGenInputs['CourseWhereUniqueInput'] | null; // CourseWhereUniqueInput
      before?: NexusGenInputs['CourseWhereUniqueInput'] | null; // CourseWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['CourseOrderByInput'][] | null; // [CourseOrderByInput!]
      where?: NexusGenInputs['CourseWhereInput'] | null; // CourseWhereInput
    }
    professor: { // args
      where: NexusGenInputs['ProfessorWhereUniqueInput']; // ProfessorWhereUniqueInput!
    }
    professors: { // args
      after?: NexusGenInputs['ProfessorWhereUniqueInput'] | null; // ProfessorWhereUniqueInput
      before?: NexusGenInputs['ProfessorWhereUniqueInput'] | null; // ProfessorWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['ProfessorOrderByInput'][] | null; // [ProfessorOrderByInput!]
      where?: NexusGenInputs['ProfessorWhereInput'] | null; // ProfessorWhereInput
    }
    student: { // args
      where: NexusGenInputs['StudentWhereUniqueInput']; // StudentWhereUniqueInput!
    }
    students: { // args
      after?: NexusGenInputs['StudentWhereUniqueInput'] | null; // StudentWhereUniqueInput
      before?: NexusGenInputs['StudentWhereUniqueInput'] | null; // StudentWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['StudentOrderByInput'][] | null; // [StudentOrderByInput!]
      where?: NexusGenInputs['StudentWhereInput'] | null; // StudentWhereInput
    }
  }
  Student: {
    courses: { // args
      after?: NexusGenInputs['CourseWhereUniqueInput'] | null; // CourseWhereUniqueInput
      before?: NexusGenInputs['CourseWhereUniqueInput'] | null; // CourseWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    professor: { // args
      after?: NexusGenInputs['ProfessorWhereUniqueInput'] | null; // ProfessorWhereUniqueInput
      before?: NexusGenInputs['ProfessorWhereUniqueInput'] | null; // ProfessorWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
    /**
     * The complexity for an individual field. Return a number
     * or a function that returns a number to specify the
     * complexity for this field.
     */
    complexity?: QueryComplexity<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}